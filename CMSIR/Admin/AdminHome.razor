@page "/AdminHomes"
@using CMSIR.IService
@using CMSIR
@using System
@inject IFileUpload fileupload
@inject IDBOperation _db
@using Dapper
@using System.Data.SqlClient





<PageTitle>AdminHome</PageTitle>

<div class="container-fluid">
 




@if(error.Er!=null)
{
        <p>@error.Er</p>
}
         @if (username.Equals(eu) && pass.Equals(ep))
    {
        <EditForm Model=@model OnValidSubmit=@FormSubmitted>
            <div class="mb-2">
                <label for="exampleInputEmail1" class="form-label">Name</label>
                <input  @bind-value="model.Name_" type="text" class="form-control" id="Name" aria-describedby="emailHelp"></input>

            </div>
            <div class="mb-2">
                <label for="Rol" class="form-label">Job Role</label>
                <input @bind-value="model.JobRole" type="text" class="form-control" id="JobRol"/>
            </div>
            <div class="mb-2">




                <BlazorInputFile.InputFile OnChange="Ghandel"></BlazorInputFile.InputFile>


            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-primary">@Title</button>
                
            </div>
        </EditForm>



        <div class="table-responsive">


            <table class="table">
                <thead class="table table-bordred table-striped">
                    <tr>
                        <th scope="col">ID</th>
                        <th scope="col">Name</th>
                        <th scope="col">JobRole</th>
                        <th scope="col">Title</th>
                        <th scope="col">Edit/Download</th>

                    </tr>
                </thead>
                <tbody>
                    @if (ReadResume != null)
                    {
                        @foreach (var item in ReadResume)
                        {
                            <tr>

                                <td>@item.ID</td>  
                                <td>@item.Name_</td>   
                                <td>@item.JobRole</td>
                                <td>@item.Rusume_N</td>


              <td>
                <div class="d-flex flex-row  mb-3">
                  <button @onclick="@(e=> EditF(@item.ID))" type="button" class="btn btn-success">
                
                    Edit</button>
             
                  <button type="button" @onclick="@(e=>Delt(@item.ID))" class="btn  btn-danger">
                  Delete
                  </button>
                </div>
              </td>
                            </tr>
                        }

                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
       <p>Please Login you Account</p>
    }

</div>

    
@code 
{
    string pass = "";
    string username = "";
    private string eu = "";
    private string ep = "";
     private string Title= "Submit";



     private int iid ;
    IFileListEntry file;
    private List<DisplayModel> ReadResume;
    private List<UserA> data;




  


    protected override  async Task OnInitializedAsync()
    {
            Title = "Submit";
             Read_();
            Read_P();
                
            data = await _db.GetDataAd(username,pass);
            foreach(var item in data)
            {
                  eu = item.username;
                  ep = item.pass;
            }

       
            ReadResume = await _db.GetData();
R();

        _db.ReadU("())($@!)()!+_!_)");
       _db.ReadP("())($@!)()34!+_!_)");

        
    }



    public void R()
{
    string dic =  System.IO.Directory.GetCurrentDirectory()+"/Admin/_sec.txt"; 
  string dic1 =  System.IO.Directory.GetCurrentDirectory()+"/Admin/pa.txt"; 

     
using (FileStream fs = File.Create(dic))
 {

 }using (FileStream fs = File.Create(dic1))
 {

 }
}

    UserA se = new UserA();
    ResumeModel model = new ResumeModel();
    public ResumeModel dis = new ResumeModel();
    async Task Ghandel(IFileListEntry[] files)
    {

        file = files.FirstOrDefault();
        if(file!=null)
        {
            await fileupload.UploadAsync(file);
            dis.Rusume_N = file.Name;

        }

    }

    public async Task  FormSubmitted()
    {

    
        
        string path = $"ResumeFiles/{dis.Rusume_N}";
    if(Title=="Submit")
    {
        DisplayModel p = new DisplayModel
            {
                Name_ = model.Name_,
                JobRole = model.JobRole,
                Rusume_N = dis.Rusume_N.ToString(),
                Paths = path

            };

        await _db.InData(p);
        ReadResume.Add(p);

          model = new ResumeModel();
    }
    else if(Title =="Update")
    {

         await DataV(iid);
    }


    Title = "Submit";

    }



    public void Read_()
    {
string dic =  System.IO.Directory.GetCurrentDirectory()+"/Admin/_sec.txt"; 

  
        string text = File.ReadLines(dic).First();
        username = text;



    }



    public void  Read_P()
    {
        string dic =  System.IO.Directory.GetCurrentDirectory()+"/Admin/pa.txt"; 
        string text = File.ReadLines(dic).First();
       pass = text;

    }

  public async Task EditF(int id)
  {
    

     Title = "Update";


     iid  = id;

    List<DisplayModel> Edit;
    

     Edit = await _db.EditView(id);

foreach(var item in Edit)
{
      model.Name_ = item.Name_;
      model.JobRole = item.JobRole;
}




  }


   public async Task DataV(int id)
   {
             
     
         string path = $"ResumeFiles/{dis.Rusume_N}";
        DisplayModel p = new DisplayModel
            {
                Name_ = model.Name_,
                JobRole = model.JobRole,
                Rusume_N = dis.Rusume_N.ToString(),
                Paths = path

            };

        await _db.Update(p,id);
     

     ReadResume = await _db.GetData();

        model = new ResumeModel();
   }





  


   public async Task Delt(int id)
  {


      await _db.Delete(id);
     ReadResume = await _db.GetData();

      

  }
  

  public async Task Searchs()
  {
    ReadResume = await _db.Search(model.Name_);
  }

}
